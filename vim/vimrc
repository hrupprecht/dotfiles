" show cursor line and column in the status line
set ruler

" show matching brackets
"set showmatch

" display mode INSERT/REPLACE/...
set showmode

" changes special characters in search patterns (default)
" set magic

" Required to be able to use keypad keys and map missed escape sequences
set esckeys

set nocompatible

" This escape sequence is the well known ANSI sequence for
" Remove Character Under The Cursor (RCUTC[tm])
map! <Esc>[3~ <Delete>
map  <ESC>[3~    x

" Only do this part when compiled with support for autocommands. 
if has("autocmd") 
  " When editing a file, always jump to the last known cursor position. 
  " Don't do it when the position is invalid or when inside an event handler 
  " (happens when dropping a file on gvim). 
  autocmd BufReadPost * 
    \ if line("'\"") > 0 && line("'\"") <= line("$") | 
    \   exe "normal g`\"" | 
    \ endif 
 
endif " has("autocmd")

" Changed default required by SuSE security team--be aware if enabling this
" that it potentially can open for malicious users to do harmful things.
set modelines=0

" get easier to use and more user friendly vim defaults
" /etc/vimrc ends here

if filereadable("/etc/vimrc.local")
  source /etc/vimrc.local
endif

let Tlist_Auto_Open = 1
let Tlist_Exit_OnlyWindow = 1
filetype off

" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let iCanHazVundle=0
endif

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" Used bundles
Bundle 'airblade/vim-gitgutter'
Bundle 'bling/vim-airline'
Bundle 'dockyard/vim-easydir'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'kshenoy/vim-signature'
Bundle 'nelstrom/vim-visual-star-search'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-pastie'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'mileszs/ack.vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'groenewege/vim-less'
Bundle 'yko/mojo.vim'

Bundle 'html_annoyance'
Bundle 'taglist.vim'
Bundle 'vim-pipe'
Bundle 'vimwiki'
Bundle 'vim-perl/vim-perl'

" Color schemes
Bundle 'jonathanfilip/vim-lucius'
Bundle 'nanotech/jellybeans.vim'
Bundle 'w0ng/vim-hybrid.git'

"Add your bundles here
if iCanHazVundle == 0
   echo "Installing Bundles, please ignore key map error messages"
   echo ""
  :BundleInstall
endif

let mojo_highlight_data=1

syntax on
filetype plugin on
filetype indent on

set langmenu=en_US.UTF-8
let $LANG='en_US'

let mapleader=","

set backspace=indent,eol,start
set encoding=utf-8
set foldcolumn=2
set incsearch                    " Highlight search while typing
set linebreak
set modeline
set number
set ruler
set smartindent                  " Smart autoindenting when starting a new line
set splitbelow                   " Open new split below
set t_Co=256                     " Explicitly tell vim that the terminal supports 256 colors
set virtualedit=block
" set winheight=999

" Disable swapfiles and backup
set nobackup
set noswapfile

" Tab-completion in command line mode
set wildmode=list:longest

" Tab options
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Stop using arrow keys!
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Easy window switching
imap <C-w> <C-o><C-w>
map <C-J> <C-W>j<C-w>_
map <C-K> <C-W>k<C-w>_
map <C-H> <C-W>h<C-w>_
map <C-L> <C-W>l<C-w>_
map <C-_> <C-W>_

map <F6> :set list!<Bar>set list?<CR>
map <F7> :GundoToggle<CR>
map <F8> :Tlist<CR>
map <F9> :set wrap!<Bar>set wrap?<CR>
map <F10> :set paste!<Bar>set paste?<CR>
map <F11> :set hls!<Bar>set hls?<CR>

" Quick divide line
nmap <silent> <leader><CR> i<CR><ESC>

" Disable annoying switching to ex mode
nnoremap Q <nop>

" Easy begin and end of line
nnoremap H 0
nnoremap L $

" Y to yank to the end of the line
nnoremap Y y$

command! W w
command! Q q

" Leave selection after indenting in visual
vnoremap < <gv
vnoremap > >gv

" Save with sudo
cmap w!! w !sudo tee % > /dev/null

" Easy .vimrc edit and source
nmap <leader>erc :sp $MYVIMRC<CR>
nmap <leader>src :source $MYVIMRC<CR>

cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

if has("unix")
   " Simple session handling
   nmap <leader>ss :wa<CR>:mksession! $HOME/.vim/sessions/
   nmap <leader>so :wa<CR>:so $HOME/.vim/sessions/
else  " Windows version
   nmap <leader>ss :wa<CR>:mksession! $VIM/sessions/
   nmap <leader>so :wa<CR>:so $VIM/sessions/
endif

" Always show status line
set laststatus=2

" Perl options
let perl_fold = 1
let perl_fold_anonymous_subs = 1
let perl_nofold_packages = 1
let perl_include_pod = 1
let perl_include_pod = 1
" syntax color complex things like @{${"foo"}}
let perl_extended_vars = 1

" use syntax highlightning
syn on
" show the laststatus always, show line numbers, expand tabs to the same number of spaces and use a shiftwitdh of 3
se ls=2 nu et sw=2

" folding by syntax
se foldmethod=syntax
" display folds in the first column
se foldcolumn=1
se winheight=40
" highlight search results
se hlsearch
" incremental search: find while typing
se incsearch
set complete+=k           " scan the files given with the 'dictionary' option
" show incomplete commands
se showcmd

au BufNewFile,BufRead *.tt setf tt2

" " OPTIONAL: This enables automatic indentation as you type.
filetype indent on


" Tidy selected lines (or entire file) with _t:
nnoremap <silent> _t :%!perltidy -q<Enter>
vnoremap <silent> _t :!perltidy -q<Enter>

" Deparse obfuscated code
nnoremap <silent> _d :.!perl -MO=Deparse 2>/dev/null<cr>
vnoremap <silent> _d :!perl -MO=Deparse 2>/dev/null<cr>

" Perl syntax check with make
autocmd BufNewFile,BufRead *.p? compiler perl

" Perl test files (assumes vim is running from project root)
autocmd BufNewFile,BufRead *.t setf perl
autocmd BufNewFile,BufRead *.t map <buffer> <F5> :!prove -It -l %<CR>

" Toolkit template syntax
autocmd BufNewFile,BufRead *.tt setf tt2html

" Embedded perl templates syntax
autocmd BufNewFile,BufRead *.ep setf html

" Auto remove trailing whitespaces
autocmd BufWritePre *.pl,*.pm,*.t,*.tt,*.ep :%s/\s\+$//e

highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
match OverLength /\%81v/

" Run perltidy
fun! Pretty ()
   execute '%!perltidy -q'
endfun

autocmd BufNewFile,BufRead *.p? nmap <silent> <C-g> <Esc> :call Pretty()<CR>

" Toggle line numbers
function! NumberToggle()
   if(&number == 1)
      set relativenumber
   else
      if(&relativenumber == 1)
         set norelativenumber
      else
         set number
      endif
   endif
endfunc

map <F3> :call NumberToggle()<Bar>set number?<CR>

" use aesthetic middle of screen for "zz"
nnoremap <silent> zz :exec "normal! zz" . float2nr(winheight(0)*0.1) . "\<Lt>C-E>"<CR>

" Hybrid colorscheme
" colorscheme hybrid
colorscheme kraihlight

" CtrlP settings
let g:ctrlp_working_path_mode = 2
let g:ctrlp_custom_ignore = {
   \ 'dir':  '\v[\/](\.(git|hg|svn))|(blib)$',
   \ 'file': '\v\.sw[a-z]$',
   \ }

" Vim Pipe settings
autocmd BufNewFile,BufRead *.t let b:vimpipe_command="./Build test --test-files=% --verbose 2>&1"
autocmd BufNewFile,BufRead *.t let b:vimpipe_filetype="tap"

" Vim airline
let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts = 1

"gist
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_browser_command = 'w3m %URL%'
"let g:gist_browser_command = 'opera %URL% &'

"If you want to show your private gists with ":Gist -l":
let g:gist_show_privates = 1

"If you want your gist to be private by default:
let g:gist_post_private = 1

"If you want to manipulate multiple files in a gist:
let g:gist_get_multiplefile = 1

let g:vim_markdown_folding_disabled=1
let g:vim_markdown_initial_foldlevel=1


