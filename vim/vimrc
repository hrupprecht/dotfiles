" show cursor line and column in the status line
set ruler

" show matching brackets
set showmatch

" display mode INSERT/REPLACE/...
set showmode

" changes special characters in search patterns (default)
" set magic

" Required to be able to use keypad keys and map missed escape sequences
set esckeys

set nocompatible

" Complete longest common string, then each full match
" enable this for bash compatible behaviour
" set wildmode=longest,full

" Try to get the correct main terminal type
if &term =~ "xterm"
    let myterm = "xterm"
else
    let myterm =  &term
endif
let myterm = substitute(myterm, "cons[0-9][0-9].*$",  "linux", "")
let myterm = substitute(myterm, "vt1[0-9][0-9].*$",   "vt100", "")
let myterm = substitute(myterm, "vt2[0-9][0-9].*$",   "vt220", "")
let myterm = substitute(myterm, "\\([^-]*\\)[_-].*$", "\\1",   "")

" Here we define the keys of the NumLock in keyboard transmit mode of xterm
" which misses or hasn't activated Alt/NumLock Modifiers.  Often not defined
" within termcap/terminfo and we should map the character printed on the keys.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <ESC>Oo  :
    map! <ESC>Oj  *
    map! <ESC>Om  -
    map! <ESC>Ok  +
    map! <ESC>Ol  ,
    map! <ESC>OM  
    map! <ESC>Ow  7
    map! <ESC>Ox  8
    map! <ESC>Oy  9
    map! <ESC>Ot  4
    map! <ESC>Ou  5
    map! <ESC>Ov  6
    map! <ESC>Oq  1
    map! <ESC>Or  2
    map! <ESC>Os  3
    map! <ESC>Op  0
    map! <ESC>On  .
    " keys in normal mode
    map <ESC>Oo  :
    map <ESC>Oj  *
    map <ESC>Om  -
    map <ESC>Ok  +
    map <ESC>Ol  ,
    map <ESC>OM  
    map <ESC>Ow  7
    map <ESC>Ox  8
    map <ESC>Oy  9
    map <ESC>Ot  4
    map <ESC>Ou  5
    map <ESC>Ov  6
    map <ESC>Oq  1
    map <ESC>Or  2
    map <ESC>Os  3
    map <ESC>Op  0
    map <ESC>On  .
endif

" xterm but without activated keyboard transmit mode
" and therefore not defined in termcap/terminfo.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <Esc>[H  <Home>
    map! <Esc>[F  <End>
    " Home/End: older xterms do not fit termcap/terminfo.
    map! <Esc>[1~ <Home>
    map! <Esc>[4~ <End>
    " Up/Down/Right/Left
    map! <Esc>[A  <Up>
    map! <Esc>[B  <Down>
    map! <Esc>[C  <Right>
    map! <Esc>[D  <Left>
    " KP_5 (NumLock off)
    map! <Esc>[E  <Insert>
    " PageUp/PageDown
    map <ESC>[5~ <PageUp>
    map <ESC>[6~ <PageDown>
    map <ESC>[5;2~ <PageUp>
    map <ESC>[6;2~ <PageDown>
    map <ESC>[5;5~ <PageUp>
    map <ESC>[6;5~ <PageDown>
    " keys in normal mode
    map <ESC>[H  0
    map <ESC>[F  $
    " Home/End: older xterms do not fit termcap/terminfo.
    map <ESC>[1~ 0
    map <ESC>[4~ $
    " Up/Down/Right/Left
    map <ESC>[A  k
    map <ESC>[B  j
    map <ESC>[C  l
    map <ESC>[D  h
    " KP_5 (NumLock off)
    map <ESC>[E  i
    " PageUp/PageDown
    map <ESC>[5~ 
    map <ESC>[6~ 
    map <ESC>[5;2~ 
    map <ESC>[6;2~ 
    map <ESC>[5;5~ 
    map <ESC>[6;5~ 
endif

" xterm/kvt but with activated keyboard transmit mode.
" Sometimes not or wrong defined within termcap/terminfo.
if myterm == "xterm" || myterm == "kvt" || myterm == "gnome"
    " keys in insert/command mode.
    map! <Esc>OH <Home>
    map! <Esc>OF <End>
    map! <ESC>O2H <Home>
    map! <ESC>O2F <End>
    map! <ESC>O5H <Home>
    map! <ESC>O5F <End>
    " Cursor keys which works mostly
    " map! <Esc>OA <Up>
    " map! <Esc>OB <Down>
    " map! <Esc>OC <Right>
    " map! <Esc>OD <Left>
    map! <Esc>[2;2~ <Insert>
    map! <Esc>[3;2~ <Delete>
    map! <Esc>[2;5~ <Insert>
    map! <Esc>[3;5~ <Delete>
    map! <Esc>O2A <PageUp>
    map! <Esc>O2B <PageDown>
    map! <Esc>O2C <S-Right>
    map! <Esc>O2D <S-Left>
    map! <Esc>O5A <PageUp>
    map! <Esc>O5B <PageDown>
    map! <Esc>O5C <S-Right>
    map! <Esc>O5D <S-Left>
    " KP_5 (NumLock off)
    map! <Esc>OE <Insert>
    " keys in normal mode
    map <ESC>OH  0
    map <ESC>OF  $
    map <ESC>O2H  0
    map <ESC>O2F  $
    map <ESC>O5H  0
    map <ESC>O5F  $
    " Cursor keys which works mostly
    " map <ESC>OA  k
    " map <ESC>OB  j
    " map <ESC>OD  h
    " map <ESC>OC  l
    map <Esc>[2;2~ i
    map <Esc>[3;2~ x
    map <Esc>[2;5~ i
    map <Esc>[3;5~ x
    map <ESC>O2A  ^B
    map <ESC>O2B  ^F
    map <ESC>O2D  b
    map <ESC>O2C  w
    map <ESC>O5A  ^B
    map <ESC>O5B  ^F
    map <ESC>O5D  b
    map <ESC>O5C  w
    " KP_5 (NumLock off)
    map <ESC>OE  i
endif

if myterm == "linux"
    " keys in insert/command mode.
    map! <Esc>[G  <Insert>
    " KP_5 (NumLock off)
    " keys in normal mode
    " KP_5 (NumLock off)
    map <ESC>[G  i
endif

" This escape sequence is the well known ANSI sequence for
" Remove Character Under The Cursor (RCUTC[tm])
map! <Esc>[3~ <Delete>
map  <ESC>[3~    x

" Only do this part when compiled with support for autocommands. 
if has("autocmd") 
  " When editing a file, always jump to the last known cursor position. 
  " Don't do it when the position is invalid or when inside an event handler 
  " (happens when dropping a file on gvim). 
  autocmd BufReadPost * 
    \ if line("'\"") > 0 && line("'\"") <= line("$") | 
    \   exe "normal g`\"" | 
    \ endif 
 
endif " has("autocmd")

" Changed default required by SuSE security team--be aware if enabling this
" that it potentially can open for malicious users to do harmful things.
set modelines=0

" get easier to use and more user friendly vim defaults
" /etc/vimrc ends here

if filereadable("/etc/vimrc.local")
  source /etc/vimrc.local
endif

let Tlist_Auto_Open = 1
let Tlist_Exit_OnlyWindow = 1
filetype off

" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let iCanHazVundle=0
endif

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" Used bundles
Bundle 'airblade/vim-gitgutter'
Bundle 'bling/vim-airline'
Bundle 'dockyard/vim-easydir'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'kshenoy/vim-signature'
Bundle 'nelstrom/vim-visual-star-search'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'

Bundle 'html_annoyance'
Bundle 'taglist.vim'
Bundle 'vim-pipe'
Bundle 'vimwiki'

" Color schemes
Bundle 'jonathanfilip/vim-lucius'
Bundle 'nanotech/jellybeans.vim'
Bundle 'w0ng/vim-hybrid.git'

"Add your bundles here
if iCanHazVundle == 0
   echo "Installing Bundles, please ignore key map error messages"
   echo ""
  :BundleInstall
endif


syntax on
filetype plugin on
filetype indent on

set langmenu=en_US.UTF-8
let $LANG='en_US'

let mapleader=","

set backspace=indent,eol,start
set encoding=utf-8
set foldcolumn=3
set incsearch                    " Highlight search while typing
set linebreak
set modeline
set number
set ruler
set smartindent                  " Smart autoindenting when starting a new line
set splitbelow                   " Open new split below
set t_Co=256                     " Explicitly tell vim that the terminal supports 256 colors
set virtualedit=block
" set winheight=999

" Disable swapfiles and backup
set nobackup
set noswapfile

" Tab-completion in command line mode
set wildmode=list:longest

" Use mouse
if has('mouse')
   set mouse=a
endif

" Tab options
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set number 
set smartindent

" Stop using arrow keys!
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Easy window switching
imap <C-w> <C-o><C-w>
map <C-J> <C-W>j<C-w>_
map <C-K> <C-W>k<C-w>_
map <C-H> <C-W>h<C-w>_
map <C-L> <C-W>l<C-w>_
map <C-_> <C-W>_

map <F6> :set list!<Bar>set list?<CR>
map <F7> :GundoToggle<CR>
map <F8> :Tlist<CR>
map <F9> :set wrap!<Bar>set wrap?<CR>
map <F10> :set paste!<Bar>set paste?<CR>
map <F11> :set hls!<Bar>set hls?<CR>

" Quick divide line
nmap <silent> <leader><CR> i<CR><ESC>

" Disable annoying switching to ex mode
nnoremap Q <nop>

" Easy begin and end of line
nnoremap H 0
nnoremap L $

" Y to yank to the end of the line
nnoremap Y y$

command! W w
command! Q q

" Leave selection after indenting in visual
vnoremap < <gv
vnoremap > >gv

" Save with sudo
cmap w!! w !sudo tee % > /dev/null

" Easy .vimrc edit and source
nmap <leader>erc :sp $MYVIMRC<CR>
nmap <leader>src :source $MYVIMRC<CR>

cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

if has("unix")
   " Simple session handling
   nmap <leader>ss :wa<CR>:mksession! $HOME/.vim/sessions/
   nmap <leader>so :wa<CR>:so $HOME/.vim/sessions/
else  " Windows version
   nmap <leader>ss :wa<CR>:mksession! $VIM/sessions/
   nmap <leader>so :wa<CR>:so $VIM/sessions/
endif

" Always show status line
set laststatus=2

" Perl options
let perl_fold = 1
let perl_fold_anonymous_subs = 1
let perl_nofold_packages = 1
let perl_include_pod = 1

" Perl syntax check with make
autocmd BufNewFile,BufRead *.p? compiler perl

" Perl test files (assumes vim is running from project root)
autocmd BufNewFile,BufRead *.t setf perl
autocmd BufNewFile,BufRead *.t map <buffer> <F5> :!prove -It -l %<CR>

" Toolkit template syntax
autocmd BufNewFile,BufRead *.tt setf tt2html

" Embedded perl templates syntax
autocmd BufNewFile,BufRead *.ep setf html

" Auto remove trailing whitespaces
autocmd BufWritePre *.pl,*.pm,*.t,*.tt,*.ep :%s/\s\+$//e

highlight OverLength ctermbg=darkred ctermfg=white guibg=#FFD9D9
match OverLength /\%81v/

" Run perltidy
fun! Pretty ()
   execute '%!perltidy -q'
endfun

autocmd BufNewFile,BufRead *.p? nmap <silent> <C-g> <Esc> :call Pretty()<CR>

" Toggle line numbers
function! NumberToggle()
   if(&number == 1)
      set relativenumber
   else
      if(&relativenumber == 1)
         set norelativenumber
      else
         set number
      endif
   endif
endfunc

map <F3> :call NumberToggle()<Bar>set number?<CR>

" use aesthetic middle of screen for "zz"
nnoremap <silent> zz :exec "normal! zz" . float2nr(winheight(0)*0.1) . "\<Lt>C-E>"<CR>

" Hybrid colorscheme
" colorscheme hybrid
colorscheme kraihlight

" CtrlP settings
let g:ctrlp_working_path_mode = 2
let g:ctrlp_custom_ignore = {
   \ 'dir':  '\v[\/](\.(git|hg|svn))|(blib)$',
   \ 'file': '\v\.sw[a-z]$',
   \ }

" Vim Pipe settings
autocmd BufNewFile,BufRead *.t let b:vimpipe_command="./Build test --test-files=% --verbose 2>&1"
autocmd BufNewFile,BufRead *.t let b:vimpipe_filetype="tap"

" Vim airline
let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts = 1

